// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateMigration {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Migration {
  revision: Int!
  applied: Int!
  databaseMigration: String!
  datamodel: String!
  datamodelSteps: String!
  errors: String!
  finishedAt: DateTime
  name: String!
  rolledBack: Int!
  startedAt: DateTime!
  status: String!
}

type MigrationConnection {
  pageInfo: PageInfo!
  edges: [MigrationEdge]!
  aggregate: AggregateMigration!
}

input MigrationCreateInput {
  applied: Int!
  databaseMigration: String!
  datamodel: String!
  datamodelSteps: String!
  errors: String!
  finishedAt: DateTime
  name: String!
  rolledBack: Int!
  startedAt: DateTime!
  status: String!
}

type MigrationEdge {
  node: Migration!
  cursor: String!
}

enum MigrationOrderByInput {
  revision_ASC
  revision_DESC
  applied_ASC
  applied_DESC
  databaseMigration_ASC
  databaseMigration_DESC
  datamodel_ASC
  datamodel_DESC
  datamodelSteps_ASC
  datamodelSteps_DESC
  errors_ASC
  errors_DESC
  finishedAt_ASC
  finishedAt_DESC
  name_ASC
  name_DESC
  rolledBack_ASC
  rolledBack_DESC
  startedAt_ASC
  startedAt_DESC
  status_ASC
  status_DESC
}

type MigrationPreviousValues {
  revision: Int!
  applied: Int!
  databaseMigration: String!
  datamodel: String!
  datamodelSteps: String!
  errors: String!
  finishedAt: DateTime
  name: String!
  rolledBack: Int!
  startedAt: DateTime!
  status: String!
}

type MigrationSubscriptionPayload {
  mutation: MutationType!
  node: Migration
  updatedFields: [String!]
  previousValues: MigrationPreviousValues
}

input MigrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MigrationWhereInput
  AND: [MigrationSubscriptionWhereInput!]
  OR: [MigrationSubscriptionWhereInput!]
  NOT: [MigrationSubscriptionWhereInput!]
}

input MigrationUpdateInput {
  applied: Int
  databaseMigration: String
  datamodel: String
  datamodelSteps: String
  errors: String
  finishedAt: DateTime
  name: String
  rolledBack: Int
  startedAt: DateTime
  status: String
}

input MigrationUpdateManyMutationInput {
  applied: Int
  databaseMigration: String
  datamodel: String
  datamodelSteps: String
  errors: String
  finishedAt: DateTime
  name: String
  rolledBack: Int
  startedAt: DateTime
  status: String
}

input MigrationWhereInput {
  revision: Int
  revision_not: Int
  revision_in: [Int!]
  revision_not_in: [Int!]
  revision_lt: Int
  revision_lte: Int
  revision_gt: Int
  revision_gte: Int
  applied: Int
  applied_not: Int
  applied_in: [Int!]
  applied_not_in: [Int!]
  applied_lt: Int
  applied_lte: Int
  applied_gt: Int
  applied_gte: Int
  databaseMigration: String
  databaseMigration_not: String
  databaseMigration_in: [String!]
  databaseMigration_not_in: [String!]
  databaseMigration_lt: String
  databaseMigration_lte: String
  databaseMigration_gt: String
  databaseMigration_gte: String
  databaseMigration_contains: String
  databaseMigration_not_contains: String
  databaseMigration_starts_with: String
  databaseMigration_not_starts_with: String
  databaseMigration_ends_with: String
  databaseMigration_not_ends_with: String
  datamodel: String
  datamodel_not: String
  datamodel_in: [String!]
  datamodel_not_in: [String!]
  datamodel_lt: String
  datamodel_lte: String
  datamodel_gt: String
  datamodel_gte: String
  datamodel_contains: String
  datamodel_not_contains: String
  datamodel_starts_with: String
  datamodel_not_starts_with: String
  datamodel_ends_with: String
  datamodel_not_ends_with: String
  datamodelSteps: String
  datamodelSteps_not: String
  datamodelSteps_in: [String!]
  datamodelSteps_not_in: [String!]
  datamodelSteps_lt: String
  datamodelSteps_lte: String
  datamodelSteps_gt: String
  datamodelSteps_gte: String
  datamodelSteps_contains: String
  datamodelSteps_not_contains: String
  datamodelSteps_starts_with: String
  datamodelSteps_not_starts_with: String
  datamodelSteps_ends_with: String
  datamodelSteps_not_ends_with: String
  errors: String
  errors_not: String
  errors_in: [String!]
  errors_not_in: [String!]
  errors_lt: String
  errors_lte: String
  errors_gt: String
  errors_gte: String
  errors_contains: String
  errors_not_contains: String
  errors_starts_with: String
  errors_not_starts_with: String
  errors_ends_with: String
  errors_not_ends_with: String
  finishedAt: DateTime
  finishedAt_not: DateTime
  finishedAt_in: [DateTime!]
  finishedAt_not_in: [DateTime!]
  finishedAt_lt: DateTime
  finishedAt_lte: DateTime
  finishedAt_gt: DateTime
  finishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rolledBack: Int
  rolledBack_not: Int
  rolledBack_in: [Int!]
  rolledBack_not_in: [Int!]
  rolledBack_lt: Int
  rolledBack_lte: Int
  rolledBack_gt: Int
  rolledBack_gte: Int
  startedAt: DateTime
  startedAt_not: DateTime
  startedAt_in: [DateTime!]
  startedAt_not_in: [DateTime!]
  startedAt_lt: DateTime
  startedAt_lte: DateTime
  startedAt_gt: DateTime
  startedAt_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  AND: [MigrationWhereInput!]
  OR: [MigrationWhereInput!]
  NOT: [MigrationWhereInput!]
}

input MigrationWhereUniqueInput {
  revision: Int
}

type Mutation {
  createMigration(data: MigrationCreateInput!): Migration!
  updateMigration(data: MigrationUpdateInput!, where: MigrationWhereUniqueInput!): Migration
  updateManyMigrations(data: MigrationUpdateManyMutationInput!, where: MigrationWhereInput): BatchPayload!
  upsertMigration(where: MigrationWhereUniqueInput!, create: MigrationCreateInput!, update: MigrationUpdateInput!): Migration!
  deleteMigration(where: MigrationWhereUniqueInput!): Migration
  deleteManyMigrations(where: MigrationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  migration(where: MigrationWhereUniqueInput!): Migration
  migrations(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Migration]!
  migrationsConnection(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MigrationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  migration(where: MigrationSubscriptionWhereInput): MigrationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: Int!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: Int
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: Int!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
`